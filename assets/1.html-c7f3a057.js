import{_ as l,V as i,W as a,$ as e}from"./framework-b9c3f338.js";const t={},d=e('<h1 id="_01-java语法" tabindex="-1"><a class="header-anchor" href="#_01-java语法" aria-hidden="true">#</a> 01 Java语法</h1><h3 id="_1-java概述" tabindex="-1"><a class="header-anchor" href="#_1-java概述" aria-hidden="true">#</a> （1）Java概述</h3><h4 id="【1】java语言特点" tabindex="-1"><a class="header-anchor" href="#【1】java语言特点" aria-hidden="true">#</a> 【1】java语言特点</h4><ul><li>解释型语言，面向对象。 一次编译处处运行（JVM跨平台）</li></ul><h4 id="【2】java面向对象三大特点" tabindex="-1"><a class="header-anchor" href="#【2】java面向对象三大特点" aria-hidden="true">#</a> 【2】Java面向对象三大特点</h4><ul><li>封装，继承，多态。</li></ul><h4 id="【3】jdk、jre、jvm关系" tabindex="-1"><a class="header-anchor" href="#【3】jdk、jre、jvm关系" aria-hidden="true">#</a> 【3】JDK、JRE、JVM关系</h4><ul><li>JDK： Java开发工具包 ＝ JRE + 开发工具集（如javac）</li><li>JRE： Java运行环境 = JVM+Java se标准类库</li><li>JVM：Java虚拟机</li></ul><h3 id="_2-java基本语法" tabindex="-1"><a class="header-anchor" href="#_2-java基本语法" aria-hidden="true">#</a> （2）Java基本语法</h3><h4 id="【1】数据类型分类" tabindex="-1"><a class="header-anchor" href="#【1】数据类型分类" aria-hidden="true">#</a> 【1】数据类型分类</h4><ul><li>基本数据类型 <ul><li>boolean，char，byte，short，int，long，double，float</li></ul></li><li>引用数据类型 <ul><li>类，接口，数组</li></ul></li></ul><h4 id="【2】自动类型转换与强制类型转换" tabindex="-1"><a class="header-anchor" href="#【2】自动类型转换与强制类型转换" aria-hidden="true">#</a> 【2】自动类型转换与强制类型转换</h4><ul><li>自动类型转换 <ul><li>char，byte，short与int进行运算时，会自动转变成int，int与long即以上类型（boolean除外）都会自动类型转换成对应类型进行运算，结果也为对应类型，其他类型与后面类型运算同理。</li><li>举例： <ul><li><code>short s = 2; s = s - 2;</code>编译失败，int不能自动转short，运算后为int。</li><li><code>s-=2</code>编译成功，结果还是short类型</li></ul></li></ul></li><li>强制类型转换 <ul><li><code>(类名)变量名</code>即可实现类型强制转换。</li></ul></li></ul><h4 id="【3】变量分类" tabindex="-1"><a class="header-anchor" href="#【3】变量分类" aria-hidden="true">#</a> 【3】变量分类</h4><ul><li>成员变量（方法体外，有默认初始值） <ul><li>实例变量</li><li>类变量（静态）</li></ul></li><li>局部变量（方法体内，没有默认初始化值） <ul><li>形参</li><li>方法局部变量</li><li>代码块局部变量</li></ul></li><li>注意： <ul><li>局部变量可以用final修饰，必须显式赋值才能使用</li><li>对象被创建时，成员变量会自动初始化赋值</li></ul></li></ul><h4 id="【4】运算符" tabindex="-1"><a class="header-anchor" href="#【4】运算符" aria-hidden="true">#</a> 【4】运算符</h4><ul><li>算术运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、三元运算符（condition ？trueAction ：falseAction）</li></ul><blockquote><p>逻辑运算符中：&#39;x &amp;&amp; y&#39;：x为false，结果为false，不会计算y的值；x为true，还会计算y的值</p><p>逻辑运算符中：&#39;x || y&#39;：x为true，结果为true，不会计算y的值；x为false，还会计算y的值</p><p>位运算符中：<code>&lt;&lt;</code>与<code>&gt;&gt;</code>为有左/右移动，<code>&gt;&gt;&gt;</code>为无符号右移动（高位补0）。左移1位相当于*2</p></blockquote><h4 id="【5】流程控制" tabindex="-1"><a class="header-anchor" href="#【5】流程控制" aria-hidden="true">#</a> 【5】流程控制</h4><ul><li>顺序结构</li><li>分支结构 <ul><li>if ... (else if) ... else --- switch ... case ... default</li><li>switch可支持char，byte，short，int，不支持long，JDK 1.5支持枚举，JDK1.7支持String类型</li></ul></li><li>循环结构 <ul><li>for --- do...while --- while 【break与continue】</li></ul></li></ul><h3 id="_3-数组" tabindex="-1"><a class="header-anchor" href="#_3-数组" aria-hidden="true">#</a> （3）数组</h3><h4 id="【1】数组注意点" tabindex="-1"><a class="header-anchor" href="#【1】数组注意点" aria-hidden="true">#</a> 【1】数组注意点</h4><ul><li><p>数组初始化得体现其长度，一旦初始化后，长度不可变；</p></li><li><p>数组一旦new后，其中的元素元素会被隐式初始化，如引用数据类型默认为null，int为0，boolean为false；</p></li><li><p>二维数组必须声明行数n，代表有n个一维数组的引用，这些一维数组的长度可不统一。一个二维数组A相当于一维数组A中的元素是多个一维数组的引用，所以行数得声明，即确定该一维数组的长度；</p></li><li><p>数组中常见异常：下标越界与空指针；</p></li><li><p>数组长度靠属性length获取，而不是length()</p></li></ul><h4 id="【2】arrays工具类常用方法" tabindex="-1"><a class="header-anchor" href="#【2】arrays工具类常用方法" aria-hidden="true">#</a> 【2】Arrays工具类常用方法</h4><ul><li><code>boolean equals(int[] a , int[] b)</code>：比较</li><li><code>void fill(int[] a,int val)</code>：填充数组</li><li><code>void sort(int[] a)</code>：数组排序</li></ul><p>面向对象编程</p><p>基本元素：类和对象。类包含属性（成员变量）与方法。</p><p>三大特征：封装、继承、多态</p><p>类的成员：</p><ul><li>属性（成员变量），方法，构造方法</li></ul><p>构造方法</p><ul><li><p>构造方法中，有一个默认无参构造器（修饰符同类）</p></li><li><p>构造方法中，一旦显式定义构造器，系统不再提供默认构造器</p></li><li><p>构造方法可以重载，不可以重写</p></li></ul><p>方法重载：同名但不同参（与返回值类型无关）</p><p>可变个数形参：<code>（参数的类型名 ...参数名）</code>等同<code>类型名[ ] 参数名</code></p><p>Java的参数传递</p><ul><li>Java的参数传递只有值传递。 <ul><li>形参是基本数据类型：传递的是形参的&quot;数据值&quot;，方法对该值改变对实参没影响。</li><li>形参是引用数据类型：传递的是形参的&quot;地址值&quot;，可以修改该引用指向对象的属性，并没有修改&quot;地址值&quot;，只是修改了地址指向的对象的属性。</li></ul></li></ul><p>四种访问权限标识符</p><ul><li>public（同工程），protected（不同包子类），缺省（同包子类），private（同类）</li><li>class只能用public和缺省修饰。</li></ul><p>属性赋值的顺序：</p><p>默认初始化---&gt;显式初始化---&gt;构造方法初始化---&gt;“对象.属性“或“对象.方法”赋值</p><p>关键字this</p><ul><li>表明当前对象的引用，this.属性、this.方法；</li><li>this在当前类中访问属性或方法时没有访问到，会在父类中找；</li><li>this也可以实现一个构造方法中调用另一个构造器，<code>this()</code>、<code>this(形参列表)</code>代表调用的对应构造器方法，不能调用自己；</li><li><code>this(形参列表)</code>必须放在构造器的首行；</li><li>在类的一个构造器中，最多只能声明一个<code>this(形参列表)</code></li></ul><p>关键字package和import</p><ul><li>package定义该类在哪个包；</li><li>import用来导入其他包的类或接口。<code>import xx.xx.*;</code>表示导入xx.xx包下的所有类或接口；</li><li>import static组合的使用：调用指定类或接口下的静态的属性或方法。</li></ul><p>继承</p>',45),h=[d];function r(o,c){return i(),a("div",null,h)}const n=l(t,[["render",r],["__file","1.html.vue"]]);export{n as default};
