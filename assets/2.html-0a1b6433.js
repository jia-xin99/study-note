import{_ as a,V as n,W as s,X as e,Z as r,a0 as c,Y as t,$ as l,C as i}from"./framework-b9c3f338.js";const d="/study-note/jvm/6.png",_="/study-note/jvm/7.png",h={},p=e("h1",{id:"_02-pc寄存器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_02-pc寄存器","aria-hidden":"true"},"#"),t(" 02 PC寄存器")],-1),u=e("h2",{id:"概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),t(" 概念")],-1),C=e("li",null,"程序计数器存储当前线程正在执行的Java方法的JVM指令地址，若是native方法，则是未指定值。",-1),f=e("li",null,"它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能需要其完成。",-1),m=e("li",null,"字节码解释器工作时就是通过改变该寄存器的值选取下一条需要执行的字节码指令。",-1),P=e("li",null,[e("strong",null,"唯一没有OutOfMemoryError的区域。")],-1),g=l('<p><img src="'+d+'" alt=""></p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><p><strong>指令地址 : 操作指令</strong>，PC寄存器存储指令地址。执行引擎读取PC寄存器中的指令。</p><p><img src="'+_+'" alt=""></p><p>我的理解：线程切换时会切换PC寄存器和虚拟机栈、本地方法栈，然后<strong>调用执行引擎（不是执行引擎调用线程)对PC寄存器指向的指令解释执行</strong>。每个Java线程的运行伴随执行引擎的执行过程，而非一个Java线程对应一个执行引擎线程。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><blockquote><p>使用PC寄存器存储字节码指令地址的作用？ 为什么使用PC寄存器记录当前线程的执行地址？</p></blockquote><p>因为CPU不断切换各种线程，切换回来得知道从哪开始继续执行。JVM字节码解释器就是需要通过改变PC寄存器的值来明确下一条执行的字节码指令。</p><blockquote><p>PC寄存器为什么设定为线程私有？</p></blockquote><p>为能够准确记录各个线程正在执行的字节码指令地址，最好的方法就是为每个线程分配一个PC寄存器。</p>',10);function v(x,b){const o=i("font");return n(),s("div",null,[p,u,e("ul",null,[e("li",null,[e("strong",null,[r(o,{color:"66CCOO"},{default:c(()=>[t("PC寄存器存储下一条指令的地址")]),_:1})]),t("，即将要执行的指令代码。由执行引擎读取下一条指令。")]),C,f,m,P]),g])}const k=a(h,[["render",v],["__file","2.html.vue"]]);export{k as default};
