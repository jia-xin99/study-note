import{_ as n,V as s,W as a,$ as e}from"./framework-b9c3f338.js";const t={},l=e(`<h1 id="_3-应用" tabindex="-1"><a class="header-anchor" href="#_3-应用" aria-hidden="true">#</a> 3. 应用</h1><h2 id="异步调用" tabindex="-1"><a class="header-anchor" href="#异步调用" aria-hidden="true">#</a> 异步调用</h2><ul><li>异步：不需要等待结果返回就能继续执行</li><li>同步：需要等待结果返回才能继续执行（多线程中同步还有线程步调一致的含义）</li><li>作用：避免一些IO操作阻塞主线程，用新线程进行IO操作</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Async</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 同步等待</span>
        <span class="token comment">// IO操作代码，如文件读入或写出</span>
        <span class="token comment">// IO操作在主线程中，需等待IO操作执行结束才可继续执行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;做其他事&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 异步不等待</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
                <span class="token comment">// IO操作代码，如文件读入或写出</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// IO操作放在新线程中，主线程不需要等待IO操作结果返回即可继续执行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;做其他事&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提高效率" tabindex="-1"><a class="header-anchor" href="#提高效率" aria-hidden="true">#</a> 提高效率</h2><ul><li>举例：用3个线程执行3个计算，主线程汇总该3个线程的计算结果 <ul><li>单核CPU：3个线程交替执行，时间较长</li><li>多核CPU：3个线程并行，时间更短</li></ul></li><li>结论： <ul><li>单核CPU使用多线程是避免一个线程一直占用CPU，并不能实际提高运行效率</li><li>利用多核CPU并行优势，拆分任务并行执行，提高效率。（看情况）</li><li>待补充：非阻塞IO与异步IO优化</li></ul></li></ul>`,6),c=[l];function i(p,o){return s(),a("div",null,c)}const d=n(t,[["render",i],["__file","3.html.vue"]]);export{d as default};
