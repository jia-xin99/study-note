import{_ as n,V as s,W as a,$ as t}from"./framework-b9c3f338.js";const p={},e=t(`<p>Spring5框架</p><p>01 概述</p><ul><li>Spring是轻量级开源JavaEE框架</li><li>两个核心部分： <ul><li>IOC：控制反转，创建对象的过程交给Spring管理</li><li>AOP：面向切面，不修改源码进行功能增强</li></ul></li><li>Spring的核心jar包：beans、Core、Context、Expression</li></ul><p>02 IOC容器</p><p>（1）IOC概念</p><ul><li>控制反转：把对象创建和对象之间的调用过程，交给Spring管理，而不是new一个对象。</li><li>IOC的目的：降低耦合度。比如以前在类A中调用类B的对象，需要new一个B或者B子类的对象，但是后来该对象不满足条件，就得去改new的地方的源码，而利用IOC只需要改下配置文件就可以实现。</li></ul><p>（2）IOC底层原理</p><ul><li><p>IOC容器底层是对象工厂</p></li><li><p>xml解析、工厂模式、反射</p></li><li><p>步骤：</p><ol><li><p>先从xml文件中解析获取Class的类名；</p></li><li><p>然后通过反射根据类名创建对象，还可通过set方法对该对象属性进行赋值；</p></li><li><p>以上步骤在一个对象工厂类中，通过调用该工厂的方法就可获得对应的对象。</p></li></ol></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--第一步：xml配置文件，配置创建对象--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>student<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.study.Student<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--可以当成在Map中放入&lt;student,com.study.Student&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第二步：创建工厂类</span>
<span class="token keyword">class</span> <span class="token class-name">StudentFactory</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> classValue <span class="token operator">=</span> <span class="token keyword">class</span>属性值<span class="token punctuation">;</span>   <span class="token comment">// 从第一步的xml文件中获取类名</span>
	<span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过反射创建对象</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）IOC的方式</p><p>【1】BeanFactory接口</p><ul><li>IOC容器基本实现，Spring内部使用的接口，不提供给开发人员使用；</li><li>加载配置文件时不会创建对象，在获取（使用）对象才去创建---懒加载；</li></ul><p>【2】ApplicationContext接口</p><ul><li>BeanFactory接口的子接口，由开发人员使用；</li><li>加载配置文件时就会把配置文件对象创建；</li><li>其实现有FileSystemXmlApplicationContext与ClassPathXmlApplicationContext；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>&#39;xml文件路径&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;bean的id&quot;</span><span class="token punctuation">,</span><span class="token keyword">class</span>值<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取Spring管理的bean对象</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）Bean管理</p><ul><li>Bean管理：Spring创建对象，Spring注入属性---创建实例与初始化</li><li>Bean管理的方式： <ul><li>基于XML配置文件方式</li><li>基于注解方式</li></ul></li></ul><p>【1】Bean管理之XML</p><ol><li>基于XML创建对象</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- id即唯一标识，class为类全路径，scope是设置单例或多例--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>student<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.study.Student<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 注入方式1：类中有setSno、setSname方法注入--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>张三<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sno<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--补充： 注入外部bean，下面会创建一个id为classA的bean，略---&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sClass<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>classA<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!--补充：注入内部bean--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sDept<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>dept<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!--补充：注入空值，注入集合属性（数组、List、Map），略---&gt;</span>
    
	<span class="token comment">&lt;!--注入方式2：类中有对应有参构造器--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>张三<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sno<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>基于XML注入属性</p><ul><li>DI：依赖注入，注入属性。Spring根据配置文件把其他对象的引用或数值通过组件（Bean）的set方法进行属性初始化</li><li>注入方式：</li></ul><ol><li>使用set方法注入（在XML中配置Student类的属性值，Spring就会把属性值通过Student类的set方法进行注入，还可以注入其他引用数据类型的对象）</li><li>通过有参构造器进行注入</li></ol></li></ol><p>【3】Bean的分类</p><ul><li>普通Bean <ul><li>在配置文件中配置的Bean，其返回值类型即设置的class类型</li></ul></li><li>工厂Bean（FactoryBean） <ul><li>在配置文件中声明的bean类型和Spring创建该bean时返回的类型不一样 <ul><li><ol><li>要定义1个类A实现FactoryBean接口，重写getObject方法</li><li>然后在配置文件定义该类A时，Spring创建该Bean时返回的类型就是其他class类型</li></ol></li></ul></li></ul></li></ul><p>【4】Bean作用域</p><ul><li>在Spring中，默认情况下创建的Bean是单例的；</li><li>可以设置Bean的单例或多例，xml中bean标签的scope属性中singleton即单例（默认值），prototype即多例</li><li>singleton与prototype的区别： <ul><li>单例：加载spring配置文件时就会创建单实例对象</li><li>多例：不是在加载Spring配置文件时创建对象，在调用getBean方法时创建多实例对象</li></ul></li></ul><p>【5】Bean生命周期</p><ol><li>通过构造器创建Bean实例（无参构造器）</li><li>为Bean注入属性（设置属性初始值与其他bean的引用）,set方法</li><li>调用Bean的初始化方法（需要在类中自定义配置初始化的方法，且在xml中配置）</li><li>Bean可以使用</li><li>当容器关闭时，调用Bean的销毁方法（需要在类中自定义配置销毁的方法，且在xml中配置）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
    	<span class="token comment">//1.无参数构造</span>
    <span class="token keyword">public</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1.执行无参构造创建bean实例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2.调用set方法设置属性值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3.创建执行的初始化的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3.执行初始化的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3.创建执行的销毁的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5.执行销毁的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testbean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TestBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>03 AOP</p><p>04 JdbcTemplate</p><p>05 事务管理</p><p>06 Spring5新特性</p>`,34),l=[e];function o(c,u){return s(),a("div",null,l)}const k=n(p,[["render",o],["__file","1.html.vue"]]);export{k as default};
