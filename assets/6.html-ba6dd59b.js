import{_ as n,V as s,W as a,$ as l}from"./framework-b9c3f338.js";const p={},t=l(`<p>01 栈、堆、方法区的交互关系</p><p>pic 18</p><p>pic 19</p><p>02 方法区的理解</p><ul><li>方法区看做是一块独立于Java堆的内存空间，线程共享；（Non-Heap）</li><li>方法区在JVM启动时创建，可设置大小，其实际物理内存空间和Java对区一样可不连续；</li><li>方法区大小决定系统可保存多少类，若系统定义过多类，则会导致方法区溢出，OOM；</li><li>关闭JVM会释放该区域内存；</li><li>方法区是一种规范，<strong>永久代和元空间是方法区的具体实现</strong>；</li><li>永久代和元空间的最大区别：<strong>元空间不在虚拟机设置的内存中，而是使用本地内存</strong></li></ul><p>03 设置方法区大小与OOM</p><ul><li><p>方法区大小设置</p></li><li><p>jdk7及以前：</p><ul><li><code>-XX:PermSize</code>：设置永久代初始分配空间，默认20.75M</li><li><code>-XX:MaxPermSize</code>：设置永久代最大可分配空间，32位机器模式默认64M，64位机器模式默认82M</li><li>OOM：OutOfMemoryError:PermGenspace</li></ul></li><li><p>jdk8及以后：</p><ul><li><code>-XX:MetaspaceSize</code>和<code>-XX:MaxMetaspaceSize</code>，前者默认值21M，后者-1即无限制</li><li>使用系统内存，OOM：OutOfMemoryError:Metaspace</li><li>初始化值时一个初始的高水位线，一旦触及该值，Full GC会被触发并卸载没用的类（即这些类的对应的类加载器不在存活），高水位线被重置，该新值取决于GC后释放了多少元空间。若释放的空间不足，则在不超过MaxMetaspaceSize时，适当提高该值；若释放空间过多，则适当降低该值；</li><li>若初始化的高水位线设置过低，则上述高水位线频繁调整，Full GC会多次调用，则设置初始分配空间为一个较高的值。</li></ul></li><li><p>OOM的解决：</p><ul><li>通过对dump的堆转储快照进行分析，分析OOM原因是内存泄露（Memory Leak）还是内存溢出（Memory Overflow） <ul><li>内存泄露：程序在申请内存后，无法释放已申请的内存空间 <ul><li>该对象不再使用本该被回收，但由于GC Roots仍然引用该对象，导致不能GC，一般而言是代码有问题，如IO流未关闭、ThreadLocal未remove；</li><li>查看泄露对象到GC Roots的引用链，定位泄露代码的位置。</li></ul></li><li>内存溢出：程序在申请内存时，没有足够的内存空间供其使用 <ul><li>new的对象过多，但这些对象都有用，不能被GC，侧重于内存不够；</li><li>适当提高虚拟机的堆参数和物理内存大小，从代码上查看某些对象生命周期是否过长、持有状态时间是否过长，尝试减少程序运行期的内存消耗。</li></ul></li></ul></li></ul></li></ul><p>04 方法区的内部结构</p><p>  方法区存储已被虚拟机加载的<strong>类型信息、常量、静态常量、即时编译器编译后的代码缓存等</strong>。即<strong>类型信息、运行时常量池、静态变量、JIT代码缓存、域信息、方法信息</strong>。</p><p>  类被加载到方法区时，在该类和对应的类加载器中会<strong>彼此记录</strong>双方，即该类记录是被谁加载的，类加载器记录了加载哪些类。</p><ul><li>类型信息（类、接口、枚举、注解）： <ul><li>修饰符，完整有效名称（全名=包名.类名）</li><li>直接父类的完整有效名（接口与Object类无父类）</li><li>直接接口的一个有序列表</li></ul></li><li>域信息： <ul><li>方法区保存类型的所有域的相关信息与域的声明顺序（即属性），方法信息同上</li><li>域名称，域类型，域修饰符</li></ul></li><li>方法信息： <ul><li>方法名，方法返回类型，方法的修饰符，方法参数数量与类型（按顺序）</li><li>方法的字节码、操作数栈与局部变量表的大小（抽象方法和本地方法除外）</li><li>异常表（抽象方法和本地方法除外）：每个异常处理的开始/结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li><li>注：构造器在字节码文件中是<code>&lt;init&gt;</code>方法</li></ul></li><li>静态变量（类变量）： <ul><li>静态变量和类关联，随着类的加载而加载，在链接阶段的准备阶段为静态变量赋零值，在初始化阶段进行显式初始化即<code>&lt;clinit&gt;</code>方法（该方法也是包含在方法信息中）</li><li>类变量被类的所有实例共享，即使没有类实例，也可访问</li></ul></li><li>全局常量：static final <ul><li>全局常量在编译时就被分配</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 没有实例，都可访问（不可访问对象属性/方法）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        order<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pic 20</p><p>05 方法区使用举例</p><p>06 方法区的演变细节</p><p>07 方法区的垃圾回收</p><p>08 总结</p>`,17),e=[t];function i(o,c){return s(),a("div",null,e)}const r=n(p,[["render",i],["__file","6.html.vue"]]);export{r as default};
