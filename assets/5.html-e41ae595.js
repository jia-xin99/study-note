import{_ as n,V as a,W as s,$ as l}from"./framework-b9c3f338.js";const i="/study-note/jvm/1.png",e="/study-note/jvm/2.png",o="/study-note/jvm/3.png",t="/study-note/jvm/4.png",c={},p=l('<h1 id="_05-堆" tabindex="-1"><a class="header-anchor" href="#_05-堆" aria-hidden="true">#</a> 05 堆</h1><h2 id="堆的核心概述" tabindex="-1"><a class="header-anchor" href="#堆的核心概述" aria-hidden="true">#</a> 堆的核心概述</h2><ul><li>一个Java程序对应一个进程，一个进程对应一个JVM实例，一个JVM实例有一个运行时数据区，一个运行时数据区只有一个方法区与堆；</li><li>Java堆区在JVM启动时被创建，其空间大小也确定，堆内存大小可设置。是JVM管理的最大一块内存空间；</li><li>堆可以是物理上不连续的内存空间，在逻辑上是连续的内存空间，用于存储Java对象实例；</li><li>所有的线程共享Java堆，在堆上可划分线程私有的缓冲区（TLAB）【每个线程占一小块】。</li><li>《Java虚拟机规范》：所有对象实例以及数组都应当在运行时分配在堆上。【实际不一定】</li><li>数组和对象可能永远不会存储在栈上，栈帧中保存引用，该引用指向对象或数组在在堆中位置；</li><li>方法结束后，堆中对象不会马上移除，仅在GC时移除；</li><li>堆是GC执行垃圾回收的重点区域。</li><li>堆空间分为新生代和老年代，新生代分为Eden区与2个Survivor区【有1个为空】。</li></ul><p><img src="'+i+'" alt=""></p><h2 id="新生代和老年代" tabindex="-1"><a class="header-anchor" href="#新生代和老年代" aria-hidden="true">#</a> 新生代和老年代</h2><p><img src="'+e+'" alt=""></p><ul><li>JVM堆中Java对象分为2类： <ul><li>生命周期较短，其创建和消亡迅速；</li><li>生命周期较长，在某些情况下与JV M生命周期一致。</li></ul></li><li>堆区分区： <ul><li>新生代 ：新生代划分为Eden空间、Survivor0空间与Survivor1空间（from区与to区）。</li><li>老年代：存放新生代中经历多次GC后仍存活的对象。</li></ul></li><li>新生代与老年代占比： <ul><li><strong>默认情况1 : 2</strong>，新生代占1/3，若许多Java对象生命周期较长就提高old比例；</li></ul></li><li>Eden区与Survivor区占比： <ul><li><strong>默认：8 : 1 : 1</strong>，默认情况下不一定为该比例，是有自适应比例，需要关闭自适应比例：<code>-XX:-UseAdaptiveSizePolicy</code>；</li><li>Eden区过大，则导致YGC失去作用，Major GC和Full GC次数增多；Eden区过小，则YGC过于频繁；</li></ul></li><li>几乎所有Java对象在Eden区被new出来；</li><li>绝大部分Java对象销毁在新生代进行。</li></ul><h2 id="对象分配过程" tabindex="-1"><a class="header-anchor" href="#对象分配过程" aria-hidden="true">#</a> 对象分配过程</h2><ol><li>new的对象先放在Eden区，该区有大小限制；</li><li>当Eden区填满时，又要创建对象，则JVM垃圾回收器对Eden区进行Minor GC。将Eden区不再被其他对象引用的对象销毁，再加载新的对象到Eden区；</li><li>将Eden区的剩余对象移动到幸存者0区，对象的次数（年龄）+1，1区为空（to区）；</li><li>若Eden区满再次触发垃圾回收，将Eden区的未销毁的对象放在幸存者1区，幸存者0区中没被回收的对象移动到幸存者1区，次数（年龄）+1，0区为空（to区）；</li><li>若Eden区满再次触发垃圾回收，则将Eden区和幸存者1区的没被回收的对象放在幸存者0区，次数（年龄）+1，1区为空（to区，1区和0区交替为空）；</li><li>默认次数为15次，<strong>若对象经历15次GC没被回收</strong>或者<strong>幸存者区满</strong>（幸存者区部分对象）则晋升到Old区；</li><li>当老年代内存不足时，再次触发GC：Major GC；</li><li>若Major GC后，任无法进行对象的保存，则报错OOM。</li></ol><ul><li>总结： <ul><li>Eden区满才触发Minor GC，s0或s1区满不会触发Minor GC；</li><li>针对幸存者s0、s1区：复制之后有交换，谁空谁是to区；</li><li>垃圾回收频繁在新生代收集，很少在老年代收集，几乎不在永久代/元空间收集。</li></ul></li></ul><p><img src="'+o+'" alt=""></p><h2 id="minor-gc、major-gc、full-gc" tabindex="-1"><a class="header-anchor" href="#minor-gc、major-gc、full-gc" aria-hidden="true">#</a> Minor GC、Major GC、Full GC</h2><ul><li>GC按回收区域分为2类： <ul><li>部分收集（Partial GC） <ul><li>新生代收集（Minor GC/Young GC）</li><li>老年代收集（Major GC/Old GC） <ul><li>目前，只有CMS GC有Major GC</li><li>许多时候，Major GC与Full GC混淆使用</li></ul></li><li>混合收集（Mixed GC）：收集整个新生代和部分老年代 <ul><li>目前，只有G1 GC会Mixed GC</li></ul></li></ul></li><li>整堆收集（Full GC）：收集整个java堆和方法区。在开发或调优中尽量避免。</li></ul></li><li>GC触发条件： <ul><li>Minor GC： <ul><li>新生代空间不足，指Eden区满，幸存者区满不会GC（每次GC会清理年轻代内存，包含幸存者区）；</li><li>非常频繁，回收速度较快；</li><li>会引发STW（stop the world），暂停其他用户的线程，GC结束，用户线程才恢复运行。</li></ul></li><li>Major GC： <ul><li>出现Major GC，经常伴随至少一次Minor GC（非绝对，Parallel Scavenge收集器的收集策略中有直接进行Major GC的策略选择过程）； <ul><li>老年代空间不足，先尝试触发Minor GC，若还不足，则触发Major GC</li></ul></li><li>Major GC速度比Minor GC慢，STW时间更长；</li><li>若Major GC后内存仍不足，则OOM。</li></ul></li><li>Full GC： <ul><li>调用<code>System.gc()</code>，系统建议执行Full GC，不必然执行；</li><li>老年代空间不足或方法区空间不足，执行；</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存，执行；</li><li>由Eden区、From区向To区复制时，对象大小大于To区可用内存，则将该对象晋升到老年代，且老年代可用内存小于该对象大小，执行。</li></ul></li></ul></li></ul><h2 id="堆空间分带思想" tabindex="-1"><a class="header-anchor" href="#堆空间分带思想" aria-hidden="true">#</a> 堆空间分带思想</h2><blockquote><p>为什么要把Java堆分代？不分代就不能正常工作？</p></blockquote><p>  不同对象生命周期不同，大部分对象是临时对象。不分代也可以，分代是为了优化GC性能。没分代，则需要对堆所有区域进行扫描。把生命周期不同的对象分代进行统一管理，对不同代采用不同GC算法，提高GC性能。</p><h2 id="对象提升规则" tabindex="-1"><a class="header-anchor" href="#对象提升规则" aria-hidden="true">#</a> 对象提升规则</h2><ul><li>若对象在Eden区出生，经历第一次Minor GC后仍存活且可被幸存者区容纳，则移动到幸存者区，对象年龄为1。对象在幸存者区每经历一次Minor GC且未被回收，则年龄+1，当年龄达到阈值（默认15）则晋升到老年代；</li><li>不同年龄段对象分配原则： <ul><li>优先分配到Eden</li><li>大对象直接分配到老年代（尽量避免）</li><li>长期存活对象分配到老年代</li><li>动态对象年龄判断 <ul><li>若幸存者区中相同年龄的所有对象大小总和大于幸存者空间的一半，年龄大于或等于该年龄的对象直接晋升到老年代，无需达到阈值；</li></ul></li><li>空间分配担保 <ul><li>发送Minor GC前，JVM会检查老年代最大可用连续空间是否大于新生代所有总空间 <ul><li>若大于，则此次Minor GC安全</li><li>若小于，则JVM根据空间分配担保属性查看是否允许担保失败； <ul><li>若允许，则会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小 <ul><li>若大于，则尝试Minor GC，有风险</li><li>若小于，改为执行Full GC</li></ul></li><li>若不允许，则执行一次Full GC</li></ul></li></ul></li><li>JDK6 之后，只要老年代连续空间大小大于新生代对象总大小或历次晋升的平均大小进行Minor GC，否则进行Full GC。</li></ul></li></ul></li></ul><h2 id="线程本地分配缓存区-tlab" tabindex="-1"><a class="header-anchor" href="#线程本地分配缓存区-tlab" aria-hidden="true">#</a> 线程本地分配缓存区：TLAB</h2><blockquote><p>为什么会有TLAB？</p></blockquote><ul><li>堆区是线程共享区域，任何线程都可访问到堆中共享数据；</li><li>对象实例创建在JVM中非常频繁，在并发环境下从堆中划分内存空间线程不安全；</li><li>避免多个线程操作同一地址（即在同一地址创建对象），需要使用加锁等机制，进行影响分配速度。</li></ul><blockquote><p>什么是TLAB？</p></blockquote><ul><li>从内存模型而不是垃圾回收角度，对Eden区继续进行划分，JVM为<strong>每个线程分配一个私有区域</strong>，包含在Eden区中（默认TLAB空间内存小），<strong>创建是私有，访问是共享</strong>。</li><li>多线程同时分配内存时，使用TLAB避免一系列的非线程安全问题，还能提升内存分配的吞吐量，该内存分配方式为<strong>快速分配策略</strong>。</li><li>TLAB是内存分配首选，先在TLAB进行分配，若失败，则通过<strong>加锁机制</strong>确保数据原子性，在Eden空间分配内存。</li></ul><p><img src="'+t+`" alt=""></p><h2 id="堆不是分配对象的唯一选择" tabindex="-1"><a class="header-anchor" href="#堆不是分配对象的唯一选择" aria-hidden="true">#</a> 堆不是分配对象的唯一选择</h2><ul><li>JVM，对象在java堆中分配内存是常识；</li><li>若经过逃逸分析（相对耗时的）后发现，该对象并没有逃逸出方法，则可能优化成栈上分配，无需堆上分配内存，无需GC，减少GC次数。</li></ul><h3 id="【1】逃逸分析" tabindex="-1"><a class="header-anchor" href="#【1】逃逸分析" aria-hidden="true">#</a> 【1】逃逸分析</h3><ul><li>逃逸分析的基本行为是分析对象动态作用域（new的对象是否可能在方法外被调用）： <ul><li>若一个对象在方法中new后，对象只在方法内部使用，则认为没发生逃逸；</li><li>若一个对象在方法中new后，其被外部方法所引用，则认为发生逃逸； <ul><li>eg1：为成员属性赋值（new），发生逃逸；</li><li>eg2：方法返回new的对象，发生逃逸；</li><li>eg3：new的对象，作为参数传给其他方法，发生逃逸。</li></ul></li></ul></li><li>没有发生逃逸的对象，则可分配在栈上，随着方法执行结束，栈帧出栈而销毁。</li><li>总结：开发中能使用局部变量的，不要在方法外定义。</li></ul><h3 id="【2】逃逸分类" tabindex="-1"><a class="header-anchor" href="#【2】逃逸分类" aria-hidden="true">#</a> 【2】逃逸分类</h3><ul><li>方法逃逸：一个对象在方法内被new后，被外部方法所引用，例如作为参数传递到外部方法，这样此对象发生了逃逸；</li><li>线程逃逸：一个对象在方法内被new后，被外部线程访问，例如赋值给类变量或直接被其他线程访问，这样此对象发生了逃逸。</li></ul><h2 id="逃逸分析之代码优化" tabindex="-1"><a class="header-anchor" href="#逃逸分析之代码优化" aria-hidden="true">#</a> 逃逸分析之代码优化</h2><h3 id="【1】栈上分配" tabindex="-1"><a class="header-anchor" href="#【1】栈上分配" aria-hidden="true">#</a> 【1】栈上分配</h3><ul><li>堆分配转成栈分配。栈上分配可以支持未发生逃逸和方法逃逸，但不能支持线程逃逸。</li></ul><h3 id="【2】同步省略" tabindex="-1"><a class="header-anchor" href="#【2】同步省略" aria-hidden="true">#</a> 【2】同步省略</h3><ul><li>若对象发现只能从一个线程访问到，则对该对象的操作可不考虑同步，即不用加锁。 <ul><li>JIT在编译时会通过逃逸分析判断同步块所使用的锁对象是否只能被一个线程访问而没发布到其他线程，则在编译该同步块时取消对这部分代码的同步，即同步省略，锁消除。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token class-name">Object</span> hollis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token keyword">synchronized</span><span class="token punctuation">(</span>hollis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hollis<span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
	代码中对hollis这个对象进行加锁，但是hollis对象的生命周期只在f()方法中，
	每个线程进入到方法f()时，都会创建一个hollis对象，
	并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉
*/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token class-name">Object</span> hollis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hollis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【3】标量替换" tabindex="-1"><a class="header-anchor" href="#【3】标量替换" aria-hidden="true">#</a> 【3】标量替换</h3><ul><li>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。 <ul><li>eg：若对象拥有id和name两个字段，且不发生方法逃逸，则不需要创建对象，不用分配堆内存，而是将这两个字段视为局部变量进行分配</li></ul></li><li>标量：一个数据已无法再分解成更小的数据来表示，如原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解；</li><li>聚合量：一个数据可以继续分解，如Java对象，其可分解为若干聚合量与标量。 <ul><li>eg：<code>class Student { String name; int age; School school; }</code>，name、age为标量，school为聚合量。</li></ul></li><li>**使用标量替换前提：开启逃逸分析，不允许对象逃逸出方法范围内。**可视为栈上分配的一种特例</li></ul><h2 id="设置堆内存大小与oom" tabindex="-1"><a class="header-anchor" href="#设置堆内存大小与oom" aria-hidden="true">#</a> 设置堆内存大小与OOM</h2><h3 id="【1】堆空间大小设置" tabindex="-1"><a class="header-anchor" href="#【1】堆空间大小设置" aria-hidden="true">#</a> 【1】堆空间大小设置</h3><ul><li><code>-Xms</code>：堆空间起始内存，<code>-X</code>为JVM运行参数，<code>ms</code>为memory start，同<code>-XX: InitialHeapSize</code>。</li><li><code>-Xmx</code>：堆空间最大内存，同<code>-XX: MaxHeapSize</code>，堆区中内存大小超过该值，会抛出OOM（OutOfMemoryError）异常。</li><li>通常<code>-Xms</code>与<code>-Xmx</code>两参数值相同，目的是能够在GC堆区后不需要重新计算堆区大小，从而提高性能</li></ul><h3 id="【2】默认堆空间大小" tabindex="-1"><a class="header-anchor" href="#【2】默认堆空间大小" aria-hidden="true">#</a> 【2】默认堆空间大小</h3><ul><li>初始内存大小：物理电脑内存大小 / 64</li><li>最大内存大小：物理电脑内存大小 / 4</li></ul><h3 id="【3】查看设置的参数" tabindex="-1"><a class="header-anchor" href="#【3】查看设置的参数" aria-hidden="true">#</a> 【3】查看设置的参数</h3><ul><li>方法1：终端<code>jps</code>查看进程号 -&gt; <code>jstat -gc 进程id</code></li><li>方法2：VM参数<code>-XX:+PrintGCDetails</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSpaceInitial</span> <span class="token punctuation">{</span>
    <span class="token comment">//VM参数：-Xms600m -Xmx600m</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Java虚拟机中堆内存总量</span>
        <span class="token comment">// 设置600m，结果为580m，原因：只计算Eden+Old+S（只计算一个survivor区，因为必有一个幸存者区为空）</span>
        <span class="token keyword">long</span> initialMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token comment">// Java虚拟机试图使用的最大堆内存量</span>
        <span class="token comment">// 设置600m，结果为580m，原因：只计算Eden+Old+S（只计算一个survivor区，因为必有一个幸存者区为空）</span>
        <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;initialMemory: &quot;</span> <span class="token operator">+</span> initialMemory <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;maxMemory: &quot;</span> <span class="token operator">+</span> maxMemory <span class="token operator">+</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆空间的参数设置" tabindex="-1"><a class="header-anchor" href="#堆空间的参数设置" aria-hidden="true">#</a> 堆空间的参数设置</h2><ul><li><code>-XX:+PrintFlagsInitial</code>：查看所有参数默认初始值</li><li><code>-XX:+PrintFlagsFinal</code>：查看所有参数最终值</li><li><code>-XX:+PrintGCDetails</code>：输出详细的GC处理日志</li><li><code>-XX:+PrintGC</code>：打印gc简要信息</li><li><code>-Xms</code>：初始化堆空间大小</li><li><code>-Xmx</code>：最大堆空间大小</li><li><code>-Xmn</code>：新生代大小（初始值及最大值）</li><li><code>-XX:NewRatio=2</code>：老年代和新生代占比，默认2:1 <ul><li>终端<code>jps</code> -&gt; <code>jinfo -flag NewRatio 进程pid</code>查看设置情况</li></ul></li><li><code>-XX:SurvivorRatio=8</code>：Eden区与Survivor区占比，默认8:1:1 <ul><li>终端<code>jps</code> -&gt; <code>jinfo -flag SurvivorRatio 进程pid</code>查看设置情况</li></ul></li><li><code>-XX:MaxTenuringThreshold=&lt;N&gt;</code>设置对象晋升老年代的年龄阈值</li><li><code>-XX:UseTLAB</code>：设置是否开启TLAB空间，默认开启 <ul><li>终端<code>jps</code> -&gt; <code>jinfo -flag UseTLAB 进程号pid</code>：查看TLAB情况</li></ul></li><li><code>-XX:TLABWasteTargetPercent</code>：设置TLAB空间所占Eden空间的百分比</li><li><code>-HandlePromotionFailue</code>：是否设置空间分配担保，已失效</li><li><code>-XX:+DoEscapeAnalysis</code>： 表示开启逃逸分析，默认开启</li><li><code>-XX:-DoEscapeAnalysis</code>： 表示关闭逃逸分析</li><li><code>-XX:+EliminateAllocations</code>：开启标量替换（默认开启），运行将对象打散分配在栈上（前提：开启逃逸分析）</li><li><code>-XX:+EliminateLocks</code>：开启同步消除（前提：开启逃逸分析）</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>老年代放置长生命周期的对象，通常从幸存者区筛选拷贝过来的Java对象。特殊情况，对象会被分配在TLAB上；</li><li>若对象较大，JVM视图直接分配在Eden其他位置上；若过大，完全无法在新生带找到足够长的连续空间内存，则直接分配到老年代；</li><li>一般而言，MinorGC频率比MajorGC高。</li></ul>`,50),u=[p];function d(r,k){return a(),s("div",null,u)}const m=n(c,[["render",d],["__file","5.html.vue"]]);export{m as default};
