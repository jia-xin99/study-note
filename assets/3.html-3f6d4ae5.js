import{_ as e,V as o,W as i,X as n,Y as s,Z as t,a0 as p,$ as l,C as c}from"./framework-b9c3f338.js";const u="/study-note/jvm/8.png",d="/study-note/jvm/9.png",r="/study-note/jvm/10.png",k="/study-note/jvm/11.png",v="/study-note/jvm/12.png",m="/study-note/jvm/13.png",b="/study-note/jvm/14.png",h="/study-note/jvm/15.png",g="/study-note/jvm/16.png",f="/study-note/jvm/17.png",y={},w=n("h1",{id:"_03-虚拟机栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_03-虚拟机栈","aria-hidden":"true"},"#"),s(" 03 虚拟机栈")],-1),_=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),s(" 概述")],-1),q=n("strong",null,[s("栈解决程序的运行问题，即程序如何执行、如何处理数据。堆解决的是数据存储问题，数据怎么放、放在哪里。"),n("br"),s("   ")],-1),S=n("br",null,null,-1),j=l('<ul><li>生命周期 <ul><li>与线程一致；</li></ul></li><li>作用 <ul><li>主管Java程序的运行，保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回；</li></ul></li><li>优点 <ul><li>栈是快速有效的分配存储方式，访问速度仅次于程序计数器；</li><li><strong>栈不存在垃圾回收问题。</strong></li></ul></li><li>栈中可能出现的异常 <ul><li>Java栈的大小是动态或固定不变。 <ul><li>①若是固定大小，存在<strong>StackOverflowError</strong>异常</li><li>②若可动态扩展，存在<strong>OutOfMemoryError</strong>异常</li></ul></li></ul></li><li>设置栈内存大小参数：<code>-Xss256k</code></li></ul><h2 id="栈的存储单位" tabindex="-1"><a class="header-anchor" href="#栈的存储单位" aria-hidden="true">#</a> 栈的存储单位</h2><ul><li>栈中数据以<strong>栈帧</strong>格式存在。线程上执行的每个方法对应一个栈帧。</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各个数据信息。</li></ul><h2 id="栈运行原理" tabindex="-1"><a class="header-anchor" href="#栈运行原理" aria-hidden="true">#</a> 栈运行原理</h2><ul><li>JVM直接对Java栈的操作： <ul><li>执行一个方法<strong>压栈</strong></li><li>方法执行结束<strong>出栈</strong></li></ul></li><li>在一个活动线程中，一个时间点上只有一个活动栈帧，该栈帧一般为栈顶栈帧，即<strong>当前栈帧</strong>，对应的方法为<strong>当前方法</strong>，定义该方法的类为<strong>当前类</strong>。</li><li>执行引擎执行的所有字节码指令只针对当前栈帧进行操作。</li><li>若在该方法中调用其他方法，对应的新栈帧被创建，放在栈顶，成为当前栈帧。</li><li>不同线程所包含的栈帧不允许相互引用，即不可能在一个栈帧中引用另一个线程的栈帧。</li><li>若当前方法调用其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着虚拟机丢弃该栈帧，使得前一个栈帧重新成为当前栈帧。</li><li>java方法有2种返回函数的方式，都会导致栈帧被弹出： <ul><li>正常函数返回，使用return指令；</li><li>抛出异常，异常会抛给上一个栈帧进行处理，直到异常被一个栈帧处理，否则报错。</li></ul></li></ul><h2 id="栈帧内部结构" tabindex="-1"><a class="header-anchor" href="#栈帧内部结构" aria-hidden="true">#</a> 栈帧内部结构</h2><p>  一般把动态连接、方法返回地址与其他附加信息全部归为一类，称为栈帧信息。</p><ul><li>局部变量表；</li><li>操作数栈（表达式栈）；</li><li>动态链接（指向运行时常量池的方法引用）；</li><li>方法返回地址（或方法正常退出或异常退出的定义）；</li><li>一些附加信息。</li></ul><h2 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a> 局部变量表</h2><ul><li>定义为一个数字数组，主要存储方法参数和定义在方法体内的局部变量，数据类型包含基本数据类型、对象引用以及returnAddress类型；</li><li>局部变量表是建立在线程的栈上，线程私有数据，不存在线程安全问题；</li><li>局部变量表所需容量大小在<strong>编译期</strong>确定。在方法运行期间不会改变局部变量表大小。 <img src="'+u+`" alt=""></li><li>方法嵌套调用次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。参数和局部变量表越大，该方法对应的栈帧越大，方法嵌套调用次数减少。</li><li><strong>局部变量表中的变量只在当前方法调用中有效</strong>。方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。方法调用结束，随着方法栈帧销毁，局部变量表随之销毁。</li></ul><h3 id="【1】字节码中方法内部结构剖析" tabindex="-1"><a class="header-anchor" href="#【1】字节码中方法内部结构剖析" aria-hidden="true">#</a> 【1】字节码中方法内部结构剖析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVariablesTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalVariablesTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVariablesTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt=""></p><p>  其中起始PC对应当前变量作用的字节码指令的起始行号，长度相当于该变量的作用域，如图变量<code>i</code>作用域在字节码指令13行到28行，其他变量作用域能作用到36行。</p><h3 id="【2】slot" tabindex="-1"><a class="header-anchor" href="#【2】slot" aria-hidden="true">#</a> 【2】slot</h3><ul><li>局部变量表的最基本的存储单元（变量槽），4字节。</li><li>在局部变量表中，32位以内的类型只占用一个slot（包含returnAddress类型）、64位的类型（Long和Double）占2个slot。</li><li>byte、short、char在存储前被转换成int，boolean被转换成int，0为false，非零为true。</li><li>JVM为局部变量表中每个slot分配一个访问索引，通过该索引即可成功访问到局部变量表中指定的局部变量值。</li><li>当一个实例方法被调用时，其<strong>方法参数</strong>和方法体内定义的<strong>局部变量</strong>会按顺序复制到局部变量表的每个slot中。</li><li>如果需要访问局部变量表中一个64bit的局部变量值时，则只需要使用前一个索引即可。</li><li>若当前帧对应的是一个构造方法或实例方法（非静态方法即对象方法），则创建该帧时即调用一个非静态方法，局部变量表中该对象引用this将会放到index为0的Slot处。</li><li>栈帧中局部变量表中的槽位可以复用，若一个局部变量过了其作用域，则在其作用域之后申明的新的局部变量可复用过期局部变量的槽位，节省资源。</li><li>栈帧中，与性能调优关系最为密切的部分是局部变量表。</li><li>虚拟机使用局部变量表完成方法调用时的参数传递。</li><li>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象不会被回收。</li><li>在静态方法中不允许使用this：this变量不存在于当前方法的局部变量表中。</li></ul><p><strong>构造方法和实例方法的局部变量表演示：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVariablesTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 局部变量表：this</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalVariablesTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 局部变量表：this ，j，k。即使引用当前对象的不同变量，只需要1个this即可引用。j为double，占2个Slot</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// 局部变量表：this</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+'" alt=""></p><p><img src="'+k+'" alt=""></p><p><img src="'+v+`" alt=""></p><p><strong>局部变量表演示：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 局部变量表中有4个变量，但变量b和变量c是复用一个槽。</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token punctuation">{</span>
         <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
         b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><h3 id="【3】静态变量和局部变量对比" tabindex="-1"><a class="header-anchor" href="#【3】静态变量和局部变量对比" aria-hidden="true">#</a> 【3】静态变量和局部变量对比</h3><blockquote><ul><li>变量分类：</li><li>按数据类型分：基本数据类型、引用数据类型</li><li>按在类中声明位置分： <ul><li>成员变量：在使用前，都经历过默认初始化赋值 <ul><li>类变量：linking的prepare阶段：给类变量默认赋值 --&gt; initial阶段，类变量及静态代码块显式赋值</li><li>实例变量：随着对象的创建，在堆空间中分配实例变量空间，并进行默认赋值</li></ul></li><li>局部变量：在使用前，必须人为显式赋值，否则编译不通过。</li></ul></li></ul></blockquote><h2 id="操作数栈" tabindex="-1"><a class="header-anchor" href="#操作数栈" aria-hidden="true">#</a> 操作数栈</h2><ul><li><strong>操作数栈主要保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong>，每个独立的栈帧包含一个操作数栈；（数组实现）</li><li>在方法执行过程中，根据字节码指令，往栈中写入或提取数据（入栈/出栈）；</li><li>操作数栈随着栈帧的创建（方法执行）而创建，是空的；</li><li>每一个操作数栈拥有明确的栈深度用于存储数值，其所需最大深度在编译期定义；</li><li>若被调用的方法带有返回值，其返回值被压入栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令；</li><li>栈中任何一个元素可以是任意Java数据类型，32bit的类型占用1个栈深度，64bit的类型占2个栈深度；</li><li>操作数栈虽然是数组实现，但只能入栈、出栈完成一次数据访问；</li><li>操作数栈中数据类型与字节码指令的序列严格匹配的验证：编译器编译阶段，类加载的类检验阶段的数据流分析阶段；</li><li>Java虚拟机的解释引擎是基于栈的执行引擎，栈是操作数栈。</li></ul><h3 id="【1】代码追踪" tabindex="-1"><a class="header-anchor" href="#【1】代码追踪" aria-hidden="true">#</a> 【1】代码追踪</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在局部变量表中，byte会转换成int，占4个字节，1个槽</span>
        <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt=""></p><p><img src="'+h+'" alt=""></p><h3 id="【2】代码缓存技术" tabindex="-1"><a class="header-anchor" href="#【2】代码缓存技术" aria-hidden="true">#</a> 【2】代码缓存技术</h3><p>将栈顶元素全部缓存在物理CPU寄存器中，降低对内存的读/写次数，提升执行引擎效率。</p><h2 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接" aria-hidden="true">#</a> 动态链接</h2><p><img src="'+g+'" alt=""></p><ul><li>指向运行时常量池的方法引用，每个栈帧包含一个指向运行时常量池中该栈帧所属方法的引用，以便动态链接。</li><li>Java源码编译成字节码文件，变量、方法引用都作为符号引用放在class文件的常量池中；</li><li>method1调用method2，通过常量池中指向method2的符号引用来表示，方法2的结构在常量池中； <img src="'+f+'" alt=""></li><li>动态链接就是把符号引用转换成调用方法的直接引用。</li></ul><h3 id="【1】方法调用" tabindex="-1"><a class="header-anchor" href="#【1】方法调用" aria-hidden="true">#</a> 【1】方法调用</h3>',38),x=n("ul",null,[n("li",null,[s("字节码文件装载进JVM内部时，"),n("strong",null,"被调用的方法在编译期可知，且运行期保持不变"),s("。此情况下将符号引用转换成直接引用即静态链接。")])],-1),F=n("ul",null,[n("li",null,[n("strong",null,"被调用的方法在编译期无法确定"),s("，只能在运行时确定进行直接引用的转换，即动态链接。")])],-1),C=n("ul",null,[n("li",null,[n("strong",null,"被调用的目标方法在编译期可知，且运行期保持不变"),s("。即可确定目标方法与所属类的绑定，用静态链接。对应非虚方法。")])],-1),J=n("ul",null,[n("li",null,[n("strong",null,"被调用方法在编译期不确定，只能在运行时根据实际类型绑定相关方法，即晚期绑定"),s("。如子类调用重写的方法。对应虚方法。")])],-1),V=n("ul",null,[n("li",null,"方法在编译期确定具体调用版本，且不可变，即非虚方法。"),n("li",null,[s("非虚方法："),n("strong",null,"静态方法、私有方法、final方法、实例构造器、父类方法"),s("。")]),n("li",null,"其他方法为虚方法。（注意：子类有而父类没有的public方法也是虚方法，如某类对象调用其方法不能确定是该类的还是该子类的）")],-1),B=l("<ul><li>普通调用指令： <ul><li><strong><code>invokestatic</code></strong>：调用静态方法，解析阶段确定唯一方法版本</li><li><strong><code>invokespecial</code></strong>：调用<code>&lt;init&gt;</code>方法、私有及父类方法，解析阶段确定唯一方法版本</li><li><strong><code>invokespecial</code></strong>：调用所有虚方法</li><li><strong><code>invokeinterface</code></strong>：调用接口方法</li></ul></li><li>动态调用指令： <ul><li><strong><code>invokedynamic</code></strong>：动态解析出要调用的方法，再执行</li></ul></li><li>普通调用指令执行不可人为干预，动态调用指令支持用户确定方法版本。<strong><code>invokestatic</code>指令与<code>invokespecial</code>指令调用的方法是非虚方法，其余是虚方法（final修饰的除外）</strong>。</li></ul>",1),M=l(`<h3 id="【2】解析调用方法中的虚方法与非虚方法" tabindex="-1"><a class="header-anchor" href="#【2】解析调用方法中的虚方法与非虚方法" aria-hidden="true">#</a> 【2】解析调用方法中的虚方法与非虚方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
	对某个类而言：
		方法无论是否有this，还是使用了父类的非final实例方法，体现出来是Son.xx（该类的方法）就是invokevirtual，即虚方法，因为该类对象调用自己方法时并不能确定是调用该类的方法还是子类重写的方法（Father f = new Son(); f.showCommon();）；
		自己及父类的静态方法、私有方法、Super.xx可在编译期确定调用的是哪个具体类的方法，非虚方法，是该类对象的子类不能重写的方法；
		final方法是非虚方法，是invokevirtual
*/</span>
<span class="token keyword">interface</span> <span class="token class-name">MethodInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;father构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showStatic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;father静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showStatic2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;father静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">showFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;father的final方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;father普通方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// invokespecial #1</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表现为：早期绑定</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// invokespecial #2</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表现为：早期绑定</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showStatic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 并非重写，而是隐藏父类的方法，静态方法不可被重写</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Son静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Son私有方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Son公共方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 我对invokevirtual的方法的理解，这些方法还不能确定是本类的方法还是本类子类的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// invokestatic</span>
        <span class="token function">showStatic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokestatic</span>
        <span class="token function">showStatic2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokestatic</span>
        <span class="token class-name">Father</span><span class="token punctuation">.</span><span class="token function">showStatic1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokevirtual，Son.showCommon</span>
        <span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokespecial</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokevirtual, 此方法声明有final，则不能被子类重写，是非虚方法，Son.showFinal</span>
        <span class="token function">showFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokespecial</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokevirtual，Son.info</span>
        <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokevirtual，Son.info</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// invokespecial，Object.hashCode</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MethodInterface</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// invokeinterface</span>
        in<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Father</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// invokevirtual 相对Father而言，是Father.ShowCommon</span>
        <span class="token comment">// 无法确定传进来的是子类还是父类，得运行时确定</span>
        father<span class="token punctuation">.</span><span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=n("ul",null,[n("li",null,[s("类型检查是在编译期即静态类型语言（如Java），在运行期是动态类型语言（如Python）。 "),n("ul",null,[n("li",null,[s("静态类型语言是判断"),n("strong",null,"变量自身"),s("的类型信息；")]),n("li",null,[s("动态类型是判断"),n("strong",null,"变量值"),s("的类型信息，变量无类型信息，变量值才有类型信息。")])])])],-1),L=n("li",null,"随着Java8的Lambda表达式的出现，invokedynamic指令的生成在Java中有了直接的生成方式，是实现动态类型语言支持的一种改进；",-1),P=n("li",null,"我的理解：Lambda表达式作为参数时，在编译期时并不能判断该参数是什么类型，在运行时才可确定。",-1),T=n("ul",null,[n("li",null,"找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。（执行invokevirtual之前会把该对象压栈，即栈顶）"),n("li",null,[s("如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验。 "),n("ul",null,[n("li",null,"如果通过则返回这个方法的直接引用，查找过程结束；"),n("li",null,"如果不通过，则返回java.lang.IllegalAccessError 异常。（程序试图访问或修改属性或调用方法但没有权限访问）")])]),n("li",null,[s("否则，按照继承关系"),n("strong",null,"从下往上"),s("依次对C的各个父类进行第二步的搜索和验证过程。 "),n("ul",null,[n("li",null,"如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。")])])],-1),A=n("ul",null,[n("li",null,[s("为提高动态分派的性能，JVM在类的方法区中建立"),n("strong",null,"虚方法表"),s("来实现，使用索引表来代替查找。")]),n("li",null,"每个类都要虚方法表，表中存着各虚方法的实际入口。"),n("li",null,"虚方法表在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类方法表初始化完毕。"),n("li",null,"我的理解：一般而言，虚方法表中，包含本类重写的方法、非final的public方法（入口是本类），父类的非final的public方法（入口是准确的父类）。即可被重写的方法。")],-1),E=l(`<h2 id="方法返回地址" tabindex="-1"><a class="header-anchor" href="#方法返回地址" aria-hidden="true">#</a> 方法返回地址</h2><ul><li>存放主调方法的PC计数器的值。（主调方法的调用该方法的对应的指令序号）</li><li>方法结束的两种方式： <ul><li>正常执行完成：执行引擎遇到返回指令（return），会将返回值传给方法调用者，<strong>正常完成出口</strong>； <ul><li>返回指令：<code>return</code>（void、实例和类及接口的初始化方法），<code>ireturn</code>（返回值boolean、byte、char、short和int型），<code>lreturn</code>，<code>freturn</code>，<code>dreturn</code>与<code>areturn</code></li></ul></li><li>出现未处理的异常，即在本方法的异常表（try-catch）中没有匹配的异常处理器，方法非正常退出，<strong>异常完成出口</strong>；</li></ul></li><li>无论采用何种退出方式，在方法退出之后，都必须返回到最初方法被调用时的位置。 <ul><li>方法正常退出：主调方法（调用者）的PC计数器的值作为返回地址，栈帧可能会保存该计数器值。</li><li>方法异常退出：返回地址通过异常处理器表确定，栈帧不会保存这部分信息。</li></ul></li><li>正常完成出口与异常完成出口的区别：异常完成出口退出不会给上层调用者产生任何的返回值。</li><li>方法退出就是当前栈帧出栈。恢复上层方法的局部变量表、操作数栈、将返回值（若有）压入调用者栈帧的操作数栈、调整PC寄存器值指向调用指令后的一条指令等，让调用者方法恢复执行。</li></ul><h2 id="一些附加信息" tabindex="-1"><a class="header-anchor" href="#一些附加信息" aria-hidden="true">#</a> 一些附加信息</h2><p>栈帧中允许携带与Java虚拟机实现相关的一些附加信息。如，对程序调试提供支持的信息。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><blockquote><p>举例栈溢出</p></blockquote><p>无限递归。</p><blockquote><p>调整栈大小，就能保证不出现溢出？</p></blockquote><p>调整栈大小（<code>-Xss</code>调整），只能降低栈溢出的可能性，栈大小不是无限扩大的，不能保证不出现溢出。</p><blockquote><p>分配的内存越大越好吗？</p></blockquote><p>栈分配的内存越大，即每个线程分配的栈也越大，导致在一定内存的情况下，可创建的线程数变少。</p><blockquote><p>垃圾回收是否涉及到虚拟机栈？</p></blockquote><p>不涉及，只涉及堆和方法区。</p><blockquote><p>方法中定义的局部变量是否线程安全？</p></blockquote><ul><li>如果只有一个线程操作此数据，线程安全；</li><li>如果多个线程操作此数据，此数据是共享数据，不考虑同步机制，会存在线程安全问题；</li><li>该变量不是参数、不是返回值，则是线程安全；是参数、返回值的话，看类型分析。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// s1的声明方式：线程安全的，两个线程都是各创建一个对象，并不共享。未发生方法逃逸</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// StringBuilder线程不安全</span>
        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// s1的操作过程：线程不安全的，s1是多个线程共享的，会同时修改该对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// s1不是线程安全的，s1可能被当前线程创建的线程和当前线程进行修改</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// s1是线程安全的，返回的是一个新new的对象，而不是s1。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">method2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function N(I,X){const a=c("font");return o(),i("div",null,[w,_,n("p",null,[s("  "),n("strong",null,[t(a,{color:"66CCOO"},{default:p(()=>[s("栈是运行时的单位，堆是存储的单位。")]),_:1}),q,t(a,{color:"66CCOO"},{default:p(()=>[s("Java栈，每个线程创建时创建一个虚拟机栈，每个方法调用对于一个栈帧。线程私有。")]),_:1})]),S]),j,n("ul",null,[n("li",null,[s("在JVM中，符号引用转换成调用方法的直接引用与方法的绑定机制相关。 "),n("ul",null,[n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("静态链接：")]),_:1})]),x]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("动态链接：")]),_:1})]),F])])]),n("li",null,[s("对应的方法的绑定机制：早期绑定，晚期绑定。绑定是一个字段、方法或类在符号引用被替换为直接引用的过程，仅发生一次。与Java多态性有关。 "),n("ul",null,[n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("早期绑定：")]),_:1})]),C]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("晚期绑定：")]),_:1})]),J])])]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("虚方法与非虚方法：")]),_:1})]),V]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("方法调用指令：")]),_:1})]),B])]),M,n("ul",null,[n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("invokedynamic指令：")]),_:1})]),n("ul",null,[n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("动态类型语言和静态类型语言：")]),_:1})]),O]),L,P])]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("方法重写的本质：")]),_:1})]),n("ul",null,[n("li",null,[n("strong",null,[t(a,{color:"66CCOO"},{default:p(()=>[s("动态分派")]),_:1})]),s("：根据对象的实际类型，来确认调用的方法版本，子类有重写方法，则调用子类的重写方法，否则去父类找对应的方法，这就是 invokevirtual指令的执行逻辑，这是java里面对于方法重写的本质。 "),T])])]),n("li",null,[n("strong",null,[t(a,{color:"FF0000"},{default:p(()=>[s("虚方法表：")]),_:1})]),A])]),E])}const U=e(y,[["render",N],["__file","3.html.vue"]]);export{U as default};
